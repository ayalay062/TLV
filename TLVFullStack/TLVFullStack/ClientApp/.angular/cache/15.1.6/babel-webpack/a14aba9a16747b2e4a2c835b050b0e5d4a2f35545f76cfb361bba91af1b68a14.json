{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/tlv.service\";\nimport * as i3 from \"@angular/common\";\nfunction HomeComponent_h3_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\", 4);\n    i0.ɵɵtext(1, \" New TLV\\n\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\", 4);\n    i0.ɵɵtext(1, \" Update TLV \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_form_4_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Required field\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_form_4_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Min 2 letters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_form_4_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Required field\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_form_4_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Numbers Only\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_form_4_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Required field\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_form_4_mat_form_field_18_mat_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", s_r11.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", s_r11.name, \"\");\n  }\n}\nfunction HomeComponent_form_4_mat_form_field_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 6)(1, \"mat-label\");\n    i0.ɵɵtext(2, \"Status \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-select\", 13);\n    i0.ɵɵtemplate(4, HomeComponent_form_4_mat_form_field_18_mat_option_4_Template, 2, 2, \"mat-option\", 14);\n    i0.ɵɵpipe(5, \"async\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(5, 1, ctx_r9.statusList));\n  }\n}\nfunction HomeComponent_form_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 5);\n    i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_form_4_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.save());\n    });\n    i0.ɵɵelementStart(1, \"mat-form-field\", 6)(2, \"mat-label\");\n    i0.ɵɵtext(3, \" Customer Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 7);\n    i0.ɵɵtemplate(5, HomeComponent_form_4_mat_error_5_Template, 2, 0, \"mat-error\", 8);\n    i0.ɵɵtemplate(6, HomeComponent_form_4_mat_error_6_Template, 2, 0, \"mat-error\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-form-field\", 6)(8, \"mat-label\");\n    i0.ɵɵtext(9, \" Amount\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 9);\n    i0.ɵɵtemplate(11, HomeComponent_form_4_mat_error_11_Template, 2, 0, \"mat-error\", 8);\n    i0.ɵɵtemplate(12, HomeComponent_form_4_mat_error_12_Template, 2, 0, \"mat-error\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-form-field\", 6)(14, \"mat-label\");\n    i0.ɵɵtext(15, \" Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"input\", 10);\n    i0.ɵɵtemplate(17, HomeComponent_form_4_mat_error_17_Template, 2, 0, \"mat-error\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(18, HomeComponent_form_4_mat_form_field_18_Template, 6, 3, \"mat-form-field\", 11);\n    i0.ɵɵelementStart(19, \"button\", 12);\n    i0.ɵɵtext(20, \"SAVE\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    let tmp_2_0;\n    let tmp_3_0;\n    let tmp_4_0;\n    let tmp_5_0;\n    i0.ɵɵproperty(\"formGroup\", ctx_r3.form);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r3.form.get(\"customerName\")) == null ? null : tmp_1_0.errors) != null && ((tmp_1_0 = ctx_r3.form.get(\"customerName\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"required\"]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx_r3.form.get(\"customerName\")) == null ? null : tmp_2_0.errors) != null && ((tmp_2_0 = ctx_r3.form.get(\"customerName\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"minlength\"]));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx_r3.form.get(\"amount\")) == null ? null : tmp_3_0.errors) != null && ((tmp_3_0 = ctx_r3.form.get(\"amount\")) == null ? null : tmp_3_0.errors == null ? null : tmp_3_0.errors[\"required\"]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx_r3.form.get(\"amount\")) == null ? null : tmp_4_0.errors) != null && ((tmp_4_0 = ctx_r3.form.get(\"amount\")) == null ? null : tmp_4_0.errors == null ? null : tmp_4_0.errors[\"pattern\"]));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx_r3.form.get(\"createdDate\")) == null ? null : tmp_5_0.errors) != null && ((tmp_5_0 = ctx_r3.form.get(\"createdDate\")) == null ? null : tmp_5_0.errors == null ? null : tmp_5_0.errors[\"required\"]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.statusList);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r3.form || !ctx_r3.form.valid);\n  }\n}\nexport class HomeComponent {\n  constructor(fb, tlvService) {\n    this.fb = fb;\n    this.tlvService = tlvService;\n    this.email = new FormControl('', Validators.compose([Validators.required, Validators.email]));\n  }\n  ngOnInit() {}\n  sendEmail() {\n    this.tlvService.sendEmail(this.email.value || '').subscribe(res => {\n      Swal.fire('', 'Success connect to API ' + res, 'success');\n    }, () => {\n      Swal.fire('', \"Failed to connect API\", 'error');\n    });\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TlvService));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 5,\n  vars: 3,\n  consts: [[\"class\", \"title\", 4, \"ngIf\", \"ngIfElse\"], [\"updateTLV\", \"\"], [1, \"form-modal\"], [\"class\", \"form-wrapper-modal-child \", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"title\"], [1, \"form-wrapper-modal-child\", 3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\"], [\"autocomplete\", \"autocomplete\", \"formControlName\", \"customerName\", \"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"\\u05E9\\u05DD\"], [4, \"ngIf\"], [\"autocomplete\", \"autocomplete\", \"formControlName\", \"amount\", \"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"\\u05DE\\u05E9\\u05E4\\u05D7\\u05D4\"], [\"autocomplete\", \"autocomplete\", \"formControlName\", \"createdDate\", \"type\", \"date\", \"matInput\", \"\", \"placeholder\", \"\\u05DE\\u05D9\\u05D9\\u05DC\"], [\"appearance\", \"fill\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn-color\", 3, \"disabled\"], [\"formControlName\", \"statusId\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, HomeComponent_h3_0_Template, 2, 0, \"h3\", 0);\n      i0.ɵɵtemplate(1, HomeComponent_ng_template_1_Template, 2, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, HomeComponent_form_4_Template, 21, 8, \"form\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.data.TLV)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.form);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i3.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAsBA,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAEhF,OAAOC,IAAI,MAAM,aAAa;;;;;;;ICH9BC,6BAAmD;IACjDA,0BACF;IAAAA,iBAAK;;;;;IAEHA,6BAAmB;IACfA,4BACJ;IAAAA,iBAAK;;;;;IASGA,iCACgD;IAACA,+BAAc;IAAAA,iBAAY;;;;;IAC3EA,iCACiD;IAACA,8BAAa;IAAAA,iBAAY;;;;;IAM3EA,iCAC0C;IAACA,+BAAc;IAAAA,iBAAY;;;;;IACrEA,iCACyC;IAACA,6BAAY;IAAAA,iBAAY;;;;;IAOlEA,iCAC+C;IAACA,+BAAc;IAAAA,iBAAY;;;;;IAOtEA,sCAAgE;IAACA,YAAU;IAAAA,iBAAa;;;;IAA5EA,gCAAc;IAAuCA,eAAU;IAAVA,0CAAU;;;;;IAHnFA,yCAAqD;IACtCA,uBAAO;IAAAA,iBAAY;IAC9BA,sCAAuC;IACnCA,sGAAwF;;IAC5FA,iBAAa;;;;IADgCA,eAAqB;IAArBA,iEAAqB;;;;;;IAhC1EA,+BAA4F;IAApBA;MAAAA;MAAA;MAAA,OAAYA,6BAAM;IAAA,EAAC;IAEvFA,yCAAkC;IAClBA,8BAAa;IAAAA,iBAAY;IACrCA,2BAA0G;IAC1GA,iFAC2E;IAC3EA,iFAC2E;IAE/EA,iBAAiB;IACjBA,yCAAkC;IAClBA,uBAAM;IAAAA,iBAAY;IAC9BA,4BAAuG;IACvGA,mFACqE;IACrEA,mFACkE;IAEtEA,iBAAiB;IAEjBA,0CAAkC;IAClBA,sBAAI;IAAAA,iBAAY;IAC5BA,6BAA2G;IAC3GA,mFAC0E;IAE9EA,iBAAiB;IAEjBA,8FAQiB;IACjBA,mCAA0E;IAAAA,qBAAI;IAAAA,iBAAS;;;;;;;;;IAtCtCA,uCAAkB;IAKnDA,eACiC;IADjCA,yOACiC;IACjCA,eACkC;IADlCA,0OACkC;IAMlCA,eAC2B;IAD3BA,6NAC2B;IAC3BA,eAC0B;IAD1BA,4NAC0B;IAO1BA,eACgC;IADhCA,uOACgC;IAI/BA,eAAgB;IAAhBA,wCAAgB;IASMA,eAAkC;IAAlCA,6DAAkC;;;ADvC/E,OAAM,MAAOC,aAAa;EAQxBC,YAAoBC,EAAe,EACzBC,UAAsB;IADZ,OAAE,GAAFD,EAAE;IACZ,eAAU,GAAVC,UAAU;IARpB,UAAK,GAAG,IAAIP,WAAW,CAAC,EAAE,EACxBC,UAAU,CAACO,OAAO,CAAC,CACjBP,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACS,KAAK,CACjB,CAAC,CAAC;EAI+B;EAGpCC,QAAQ,IACR;EAEAC,SAAS;IAEP,IAAI,CAACL,UAAU,CAACK,SAAS,CAAC,IAAI,CAACF,KAAK,CAACG,KAAK,IAAI,EAAE,CAAC,CAACC,SAAS,CAAEC,GAAW,IAAI;MAE1Eb,IAAI,CAACc,IAAI,CAAC,EAAE,EAAE,yBAAyB,GAAGD,GAAG,EAAE,SAAS,CAAC;IAG3D,CAAC,EACC,MAAK;MAEHb,IAAI,CAACc,IAAI,CAAC,EAAE,EAAE,uBAAuB,EAAE,OAAO,CAAC;IAGjD,CAAC,CAAC;EACN;;AA7BWZ,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT1BlB,4DAEK;MACLA,+GAIc;MACdA,8BAAwB;MAEtBA,iEAwCO;MAITA,iBAAM;;;;MAtDaA,oCAAgB;MAU1BA,eAAU;MAAVA,+BAAU","names":["FormControl","Validators","Swal","i0","HomeComponent","constructor","fb","tlvService","compose","required","email","ngOnInit","sendEmail","value","subscribe","res","fire","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\user1\\Desktop\\Projects\\TLVProject\\TLVFullStack\\TLVFullStack\\ClientApp\\src\\app\\home\\home.component.ts","C:\\Users\\user1\\Desktop\\Projects\\TLVProject\\TLVFullStack\\TLVFullStack\\ClientApp\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { TlvService } from '../services/tlv.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  email = new FormControl('',\r\n    Validators.compose([\r\n      Validators.required,\r\n      Validators.email\r\n    ])),\r\n\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private tlvService: TlvService) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  sendEmail() {\r\n\r\n    this.tlvService.sendEmail(this.email.value || '').subscribe((res: string) => {\r\n\r\n      Swal.fire('', 'Success connect to API ' + res, 'success');\r\n\r\n\r\n    },\r\n      () => {\r\n\r\n        Swal.fire('', \"Failed to connect API\", 'error');\r\n\r\n\r\n      });\r\n  }\r\n\r\n\r\n}\r\n","<h3 class=\"title\" *ngIf=\"!data.TLV;else updateTLV\">\r\n  New TLV\r\n</h3>\r\n<ng-template #updateTLV>\r\n  <h3 class=\"title\" >\r\n      Update TLV\r\n  </h3>\r\n</ng-template>\r\n<div class=\"form-modal\">\r\n\r\n  <form *ngIf=\"form\" class=\"form-wrapper-modal-child \" [formGroup]=\"form\" (ngSubmit)=\"save()\">\r\n\r\n      <mat-form-field appearance=\"fill\">\r\n          <mat-label> Customer Name</mat-label>\r\n          <input autocomplete=\"autocomplete\" formControlName=\"customerName\" type=\"text\" matInput placeholder=\"שם\" />\r\n          <mat-error *ngIf=\"form.get('customerName')?.errors!= null &&\r\n          form.get('customerName')?.errors?.['required']\"> Required field</mat-error>\r\n          <mat-error *ngIf=\"form.get('customerName')?.errors!= null &&\r\n          form.get('customerName')?.errors?.['minlength']\"> Min 2 letters</mat-error>\r\n\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"fill\">\r\n          <mat-label> Amount</mat-label>\r\n          <input autocomplete=\"autocomplete\" formControlName=\"amount\" type=\"text\" matInput placeholder=\"משפחה\" />\r\n          <mat-error *ngIf=\"form.get('amount')?.errors!= null &&\r\n          form.get('amount')?.errors?.['required']\"> Required field</mat-error>\r\n          <mat-error *ngIf=\"form.get('amount')?.errors!= null &&\r\n          form.get('amount')?.errors?.['pattern']\"> Numbers Only</mat-error>\r\n\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"fill\">\r\n          <mat-label> Date</mat-label>\r\n          <input autocomplete=\"autocomplete\" formControlName=\"createdDate\" type=\"date\" matInput placeholder=\"מייל\" />\r\n          <mat-error *ngIf=\"form.get('createdDate')?.errors!= null &&\r\n          form.get('createdDate')?.errors?.['required']\"> Required field</mat-error>\r\n\r\n      </mat-form-field>\r\n\r\n      <mat-form-field *ngIf=\"statusList\" appearance=\"fill\">\r\n          <mat-label>Status </mat-label>\r\n          <mat-select formControlName=\"statusId\">\r\n              <mat-option [value]=\"s.id\" *ngFor=\"let s of statusList | async\"> {{s.name}}</mat-option>\r\n          </mat-select>\r\n\r\n\r\n\r\n      </mat-form-field>\r\n      <button class=\"btn-color\" type=\"submit\" [disabled]=\"!form || !form.valid \">SAVE</button>\r\n\r\n  </form>\r\n\r\n\r\n\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}