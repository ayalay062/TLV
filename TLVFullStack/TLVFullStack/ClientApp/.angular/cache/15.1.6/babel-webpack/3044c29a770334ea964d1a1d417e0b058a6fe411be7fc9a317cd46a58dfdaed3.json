{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/tlv.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/form-field\";\nfunction HomeComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Required field\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is not correct\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class HomeComponent {\n  constructor(fb, tlvService) {\n    this.fb = fb;\n    this.tlvService = tlvService;\n    this.email = new FormControl('', Validators.compose([Validators.required, Validators.email]));\n  }\n  ngOnInit() {}\n  sendEmail() {\n    this.tlvService.sendEmail(this.email.value || '').subscribe(res => {\n      Swal.fire('', 'Success connect to API ' + res, 'success');\n    }, () => {\n      Swal.fire('', \"Failed to connect API\", 'error');\n    });\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TlvService));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 12,\n  vars: 4,\n  consts: [[1, \"form-wrapper\"], [1, \"title\"], [1, \"form-modal\"], [\"appearance\", \"fill\"], [\"autocomplete\", \"autocomplete\", \"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"email\", 3, \"formControl\"], [4, \"ngIf\"], [1, \"btn-color\", 3, \"disabled\", \"click\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \" Login TLV \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"mat-form-field\", 3)(5, \"mat-label\");\n      i0.ɵɵtext(6, \" Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4);\n      i0.ɵɵtemplate(8, HomeComponent_mat_error_8_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵtemplate(9, HomeComponent_mat_error_9_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_10_listener() {\n        return ctx.sendEmail();\n      });\n      i0.ɵɵtext(11, \"Send\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formControl\", ctx.email);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.email == null ? null : ctx.email.errors) != null && (ctx.email == null ? null : ctx.email.errors == null ? null : ctx.email.errors[\"required\"]));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.email == null ? null : ctx.email.errors) != null && (ctx.email == null ? null : ctx.email.errors == null ? null : ctx.email.errors[\"email\"]));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.email || !ctx.email.valid);\n    }\n  },\n  dependencies: [i3.NgIf, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlDirective, i4.MatInput, i5.MatFormField, i5.MatLabel, i5.MatError],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAsBA,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAEhF,OAAOC,IAAI,MAAM,aAAa;;;;;;;;;ICQxBC,iCACiC;IAACA,+BAAc;IAAAA,iBAAY;;;;;IAC5DA,iCAC0B;IAACA,qCAAoB;IAAAA,iBAAY;;;ADLjE,OAAM,MAAOC,aAAa;EAQxBC,YAAoBC,EAAe,EACzBC,UAAsB;IADZ,OAAE,GAAFD,EAAE;IACZ,eAAU,GAAVC,UAAU;IARpB,UAAK,GAAG,IAAIP,WAAW,CAAC,EAAE,EACxBC,UAAU,CAACO,OAAO,CAAC,CACjBP,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACS,KAAK,CACjB,CAAC,CAAC;EAI+B;EAGpCC,QAAQ,IACR;EAEAC,SAAS;IAEP,IAAI,CAACL,UAAU,CAACK,SAAS,CAAC,IAAI,CAACF,KAAK,CAACG,KAAK,IAAI,EAAE,CAAC,CAACC,SAAS,CAAEC,GAAW,IAAI;MAE1Eb,IAAI,CAACc,IAAI,CAAC,EAAE,EAAE,yBAAyB,GAAGD,GAAG,EAAE,SAAS,CAAC;IAG3D,CAAC,EACC,MAAK;MAEHb,IAAI,CAACc,IAAI,CAAC,EAAE,EAAE,uBAAuB,EAAE,OAAO,CAAC;IAGjD,CAAC,CAAC;EACN;;AA7BWZ,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT1BlB,kCAA8B;MAE1BA,2BACF;MAAAA,iBAAK;MACLA,8BAAwB;MAKRA,sBAAK;MAAAA,iBAAY;MAC7BA,2BAAqG;MACrGA,0EAC4D;MAC5DA,0EAC2D;MAE7DA,iBAAiB;MACjBA,kCAC4C;MADlBA;QAAA,OAASmB,eAChC;MAAA,EAAG;MAAsCnB,qBAAI;MAAAA,iBAAS;;;MARpBA,eAAqB;MAArBA,uCAAqB;MAC5CA,eACkB;MADlBA,2KACkB;MAClBA,eACW;MADXA,wKACW;MAIlBA,eAAoC;MAApCA,yDAAoC","names":["FormControl","Validators","Swal","i0","HomeComponent","constructor","fb","tlvService","compose","required","email","ngOnInit","sendEmail","value","subscribe","res","fire","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\user1\\Desktop\\Projects\\TLVProject\\TLVFullStack\\TLVFullStack\\ClientApp\\src\\app\\home\\home.component.ts","C:\\Users\\user1\\Desktop\\Projects\\TLVProject\\TLVFullStack\\TLVFullStack\\ClientApp\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { TlvService } from '../services/tlv.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  email = new FormControl('',\r\n    Validators.compose([\r\n      Validators.required,\r\n      Validators.email\r\n    ]))\r\n\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private tlvService: TlvService) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  sendEmail() {\r\n\r\n    this.tlvService.sendEmail(this.email.value || '').subscribe((res: string) => {\r\n\r\n      Swal.fire('', 'Success connect to API ' + res, 'success');\r\n\r\n\r\n    },\r\n      () => {\r\n\r\n        Swal.fire('', \"Failed to connect API\", 'error');\r\n\r\n\r\n      });\r\n  }\r\n\r\n\r\n}\r\n","<section class=\"form-wrapper\">\r\n  <h1 class=\"title\">\r\n    Login TLV\r\n  </h1>\r\n  <div class=\"form-modal\">\r\n\r\n\r\n\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label> Email</mat-label>\r\n      <input autocomplete=\"autocomplete\" [formControl]=\"email\" type=\"email\" matInput placeholder=\"email\" />\r\n      <mat-error *ngIf=\"email?.errors!= null &&\r\n          email?.errors?.['required']\"> Required field</mat-error>\r\n      <mat-error *ngIf=\"email?.errors!= null &&\r\n      email?.errors?.['email']\"> Email is not correct</mat-error>\r\n\r\n    </mat-form-field>\r\n    <button class=\"btn-color\" (click)=\"sendEmail\r\n      ();\" [disabled]=\"!email || !email.valid \">Send</button>\r\n\r\n\r\n\r\n\r\n  </div>\r\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}